Public Class Form1

    Private wm As New WiimoteLib.Wiimote

    Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        AddHandler wm.WiimoteChanged, AddressOf wm_WiimoteChanged
        wm.Connect()
        wm.SetReportType(WiimoteLib.InputReport.ButtonsAccel, True)
    End Sub

    Private Sub wm_WiimoteChanged(ByVal sender As Object, ByVal args As WiimoteLib.WiimoteChangedEventArgs)
        BeginInvoke(New UpdateStateDelegate(AddressOf UpdateState), args)
    End Sub

    Private ax As Single
    Private ay As Single
    Private az As Single

    Private Delegate Sub UpdateStateDelegate(ByVal args As WiimoteLib.WiimoteChangedEventArgs)

    Private Sub UpdateState(ByVal args As WiimoteLib.WiimoteChangedEventArgs)
        Dim ws As WiimoteLib.WiimoteState = args.WiimoteState
        ax = ws.AccelState.Values.X
        ay = ws.AccelState.Values.Y
        az = ws.AccelState.Values.Z
        TextBoxAx.Text = ax
        TextBoxAy.Text = ay
        TextBoxAz.Text = az
        Execute()
    End Sub

    Private Function accelX()
        Return ax
    End Function

    Private Function accelY()
        Return ay
    End Function

    Private Function accelZ()
        Return az
    End Function

    Private Sub output(code As Integer)
        TextBoxMessage.Text = TextBoxMessage.Text.Substring(0, TextBoxMessage.Text.Length - 1)
        Select Case code
            Case 0
                TextBoxMessage.Text &= " "
            Case 1 To 26
                TextBoxMessage.Text &= Chr(code + 64)
            Case 27
                TextBoxMessage.Text &= ","
            Case 28
                TextBoxMessage.Text &= "."
            Case 29
                TextBoxMessage.Text &= "!"
            Case 30
                TextBoxMessage.Text &= "?"
            Case 31
                TextBoxMessage.Text &= "'"
            Case Else
                TextBoxStatus.Text = "ERROR: argument out of range (output)"
        End Select
        TextBoxMessage.Text += "<"
    End Sub

    Private Sub backSpace()
        If Not TextBoxMessage.Text = "<" Then
            TextBoxMessage.Text = TextBoxMessage.Text.Substring(0, TextBoxMessage.Text.Length - 2) + "<"
        End If
    End Sub

    Private Sub LED(val As Integer)
        If val >= 0 And val < 256 Then
            TextBoxStatus.Text = Convert.ToString(val, 2).PadLeft(8, "0")
        Else
            TextBoxStatus.Text = "ERROR: argument out of range (LED)"
        End If
    End Sub

    Private Sub ButtonClear_Click(sender As Object, e As EventArgs) Handles ButtonClear.Click
        TextBoxMessage.Text = "<"
    End Sub

    Private Sub Form1_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs) Handles MyBase.FormClosing
        wm.Disconnect()
    End Sub

    'code below generated by translate.py
    Private c1 As Single
    Private f As Single

    Private Sub Execute()
        If accelX() > 0.4 And accelY() > 0.4 Then
            f = 2
        ElseIf accelX() > 0.4 And accelY() < -0.4 Then
            f = 4
        ElseIf accelX() < -0.4 And accelY() < -0.4 Then
            f = 6
        ElseIf accelX() < -0.4 And accelY() > 0.4 Then
            f = 8
        ElseIf accelY() > 0.4 And (f < 2 Or f = 3 Or f = 5 Or f = 7) Then
            f = 1
        ElseIf accelX() > 0.4 And (f < 2 Or f = 3 Or f = 5 Or f = 7) Then
            f = 3
        ElseIf accelY() < -0.4 And (f < 2 Or f = 3 Or f = 5 Or f = 7) Then
            f = 5
        ElseIf accelX() < -0.4 And (f < 2 Or f = 3 Or f = 5 Or f = 7) Then
            f = 7
        ElseIf accelX() > -0.2 And accelX() < 0.2 And accelY() > -0.2 And accelY() < 0.2 And c1 = 0 And f = 5 Then
            backSpace()
            f = 0
        ElseIf accelX() > -0.2 And accelX() < 0.2 And accelY() > -0.2 And accelY() < 0.2 And c1 = 0 And f = 8 Then
            output(0)
            f = 0
        ElseIf accelX() > -0.2 And accelX() < 0.2 And accelY() > -0.2 And accelY() < 0.2 And c1 = 0 And f > 0 Then
            c1 = f
            f = 0
        ElseIf accelX() > -0.2 And accelX() < 0.2 And accelY() > -0.2 And accelY() < 0.2 And c1 > 0 And c1 < 5 And f > 0 And (f < 6 Or f < 8 And c1 < 4) Then
            output(c1 * 7 + f - 7)
            c1 = 0
            f = 0
        ElseIf accelX() > -0.2 And accelX() < 0.2 And accelY() > -0.2 And accelY() < 0.2 And c1 = 6 And f = 1 Then
            output(27)
            c1 = 0
            f = 0
        ElseIf accelX() > -0.2 And accelX() < 0.2 And accelY() > -0.2 And accelY() < 0.2 And c1 = 6 And f = 2 Then
            output(31)
            c1 = 0
            f = 0
        ElseIf accelX() > -0.2 And accelX() < 0.2 And accelY() > -0.2 And accelY() < 0.2 And c1 = 7 And f = 1 Then
            output(28)
            c1 = 0
            f = 0
        ElseIf accelX() > -0.2 And accelX() < 0.2 And accelY() > -0.2 And accelY() < 0.2 And c1 = 7 And f = 2 Then
            output(30)
            c1 = 0
            f = 0
        ElseIf accelX() > -0.2 And accelX() < 0.2 And accelY() > -0.2 And accelY() < 0.2 And c1 = 7 And f = 3 Then
            output(29)
            c1 = 0
            f = 0
        End If
    End Sub
End Class